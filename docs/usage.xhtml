<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" version="XHTML+RDFa 1.0" dir="ltr">
<head>
	<meta http-equiv="Content-Type" content="application/xhtml+xml;charset=utf-8"/>
	<meta name="viewport" content="width=device-width, initial-scale=1"/>
	<title>Usage | URI Template Router</title>
	<link rel="stylesheet" href="style.css"/>
	<link rel="prev" href="index.xhtml"/>
	<link rel="next" href="api.xhtml"/>
</head>
<body class="pagewidth">
	<div class="site-header">
		<header>
			<ul>
				<li><h1><a href="index.xhtml">URI Template Router</a></h1></li>
				<li class="active"><a href="usage.xhtml">Usage</a></li>
				<li><a href="api.xhtml">API</a></li>
				<li><a href="demo.xhtml">demo</a></li>
			</ul>
			<ul id="ext-links">
				<li><a href="https://www.npmjs.com/package/uri-template-router">npm</a></li>
				<li><a href="https://yarnpkg.com/package/uri-template-router">Yarn</a></li>
				<li><a href="https://github.com/awwright/uri-template-router">GitHub</a></li>
			</ul>
		</header>
	</div>
	<main>
		<h2>Usage</h2>

		<section id="usage-route">
			<h3>URI Template Expansion</h3>
			<p>The <a href="api.xhtml#api-route">Route</a> class may be used to generate a URI template and expand it into a full URI.</p>
			<pre>
const route = new Route('http://localhost/blog{/yyyy,mm,dd,slug}');
console.log(route.toString({yyyy:'1999', mm:'10', dd:'30', slug:'homesteading-the-noosphere'}));
// Output: "http://localhost/blog/1999/10/30/homesteading-the-noosphere"
</pre>
<pre>
const router = new Router;
const routes = {
	index: router.addRoute('http://localhost/'),
	blog: router.addRoute('http://localhost/blog{/yyyy,mm,dd,slug}'),
	page: router.addRoute('http://localhost{/page}'),
	file: router.addRoute('http://localhost/static{/path}'),
	png: router.addRoute('http://localhost/static{/path}.png'),
	css: router.addRoute('http://localhost/static{/path}.css'),
	js: router.addRoute('http://localhost/static{/path}.js'),
};
console.log(routes.png.toString({path: ['hero']}));
// Output: http://localhost/static/hero.png
</pre>
			<p>The full feature set of <a href="https://tools.ietf.org/html/rfc6570">RFC 6570 URI templates</a> is available for use, including substrings and all the operators.</p>
		</section>

		<section id="usage-router">
			<h3>Routing a set of URI Templates</h3>
			<p>The <a href="api.xhtml#api-router">Router</a> interface collects multiple Route instances, and can route a URI to the closest matching Route, as well as the parameters that can be used to fill it to reproduce the given URI.</p>
			<p>Use <code>addRoute</code> to insert a URI Template or a Route object into the routing table. Two routes cannot partially overlap, each route must be completely disjoint, a strict subset, or a strict superset to all other routes.</p>
			<pre>
const router = new Router;
router.addRoute('http://localhost/');
router.addRoute('http://localhost/blog{/yyyy,mm,dd,slug}');
router.addRoute('http://localhost{/page}');
router.addRoute('http://localhost/static{/path}');
router.addRoute('http://localhost/static{/path}.png');
router.addRoute('http://localhost/static{/path}.css');
router.addRoute('http://localhost/static{/path}.js');

const match = router.resolveURI('http://localhost/blog/1999/10/30/homesteading%20the%20noosphere');
console.log(match.params);
/* Output:
{
	yyyy: "1999",
	mm: "10",
	dd: "30",
	slug: "homesteading the noosphere",
}
*/
</pre>
		</section>

		<section id="usage-route-parent">
			<h3>Manually setting a parent route</h3>
			<p>The router will automatically match the route that matches the smallest set of URIs, so that no other route is a strict subset. You can force this behavior by using the <code>parent</code> option when creating a Route:</p>
			<pre>
const router = new Router;
const blog = router.addRoute('http://localhost/blog{/yyyy,slug}');
const blog_html = router.addRoute('http://localhost/blog{/yyyy,slug}.html', {parent: blog});
</pre>
			<p>This will force the "blog_html" route to only match routes that are a subset of "blog". Without this option, the URI &lt;http://localhost/blog.html&gt; would match blog_html but not blog, and instead of blog_html being a strict subset, the routes would partially overlap.</p>
		</section>

		<section id="usage-router">
			<h3>Using the matchValue property to name routes</h3>
			<p>The <code>Route#getValue</code> method may be used to retrieve a <code>Route</code> that has a given <code>matchValue</code>. This allows you to use the property as a name:</p>
			<pre>
const router = new Router;
router.addRoute('http://localhost/blog{/yyyy,mm,dd,slug}', {}, 'blog'),
router.addRoute('http://localhost{/page}', {}, 'page'),
router.addRoute('http://localhost/static{/path}', {}, 'file'),
router.addRoute('http://localhost/static{/path}.png', {}, 'png'),
router.addRoute('http://localhost/static{/path}.css', {}, 'css'),
router.addRoute('http://localhost/static{/path}.js', {}, 'js'),

const page = router.getValue('page');
console.log(page.toString({ page: 'about' }));
// Output: "http://localhost/about"
</pre>
				
		</section>

	</main>
	<footer>
		<a rel="prev" href="index.xhtml">Previous: Introduction</a>
		<a rel="next" href="api.xhtml">Next: API</a>
	</footer>
</body>
</html>
